---
title: "Admixture analysis"
format: html
editor: visual
---

# Load data
```{r}
# Load data
fam <- read.table("Dragen/chr22/chr22_sample_100_filtered2.fam", header = FALSE)
qmatrix <- read.table("Dragen/chr22/chr22_sample_100_filtered2.3.Q", header = FALSE)

# Combine data
data <- cbind(fam, qmatrix)

# Set column names
num_clusters <- ncol(qmatrix)  # Number of clusters (e.g., 2 for K=2)
colnames(data) <- c("FID", "IID", "PID", "MID", "Sex", "Phenotype", paste0("Cluster", 1:num_clusters))

# View data
head(data)
```

```{r}
# Install required packages (if not already installed)
if (!require("reshape2")) install.packages("reshape2")
if (!require("ggplot2")) install.packages("ggplot2")

# Load libraries
library(reshape2)
library(ggplot2)

# Reshape data
data_long <- melt(data, id.vars = c("FID", "IID"), measure.vars = paste0("Cluster", 1:num_clusters))

# View reshaped data
head(data_long)
```
# Experiment with k and different approaches for sorting
```{r}
# Create the bar plot with sorted individuals
ggplot(data_long, aes(x = IID, y = value, fill = variable)) +
  geom_bar(stat = "identity", width = 1) +
  labs(x = "Individuals", y = "Ancestry Proportion", fill = "Cluster") +
  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
  theme_minimal() +
  ggtitle("ADMIXTURE Plot k=2")

```

```{r}
# Subset data for Cluster 1
cluster1_data <- data_long[data_long$variable == "Cluster1", ]

# Sort data by the proportion of Cluster 1 (descending order)
cluster1_sorted <- cluster1_data[order(cluster1_data$value, decreasing = TRUE), ]

# Use the sorted 'IID' order for the entire dataset
data_long_sorted <- data_long
data_long_sorted$IID <- factor(data_long_sorted$IID, levels = cluster1_sorted$IID)

# Create the bar plot with sorted individuals
ggplot(data_long_sorted, aes(x = IID, y = value, fill = variable)) +
  geom_bar(stat = "identity", width = 1) +
  labs(x = "Individuals", y = "Ancestry Proportion", fill = "Cluster") +
  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
  theme_minimal() +
  ggtitle("ADMIXTURE Plot k=3")

```

```{r}
# Subset data for Cluster 1 and Cluster 2
cluster1_data <- data_long[data_long$variable == "Cluster2", ]
cluster2_data <- data_long[data_long$variable == "Cluster3", ]

# Merge Cluster 1 and Cluster 2 values into a single dataframe
cluster_combined <- merge(
  cluster1_data[, c("IID", "value")],
  cluster2_data[, c("IID", "value")],
  by = "IID",
  suffixes = c("_Cluster1", "_Cluster2")
)

# Sort first by Cluster 1 (descending) and then by Cluster 2 (descending)
cluster_combined_sorted <- cluster_combined[order(-cluster_combined$value_Cluster1, -cluster_combined$value_Cluster2), ]

# Use the sorted 'IID' order for the entire dataset
data_long_sorted <- data_long
data_long_sorted$IID <- factor(data_long_sorted$IID, levels = cluster_combined_sorted$IID)

# Create the bar plot with sorted individuals
ggplot(data_long_sorted, aes(x = IID, y = value, fill = variable)) +
  geom_bar(stat = "identity", width = 1) +
  labs(x = "Individuals", y = "Ancestry Proportion", fill = "Cluster") +
  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
  theme_minimal() +
  ggtitle("ADMIXTURE Plot Sorted by Cluster 1 and Cluster 2")
```

```{r}
# Subset data for all 3 clusters
cluster1_data <- data_long[data_long$variable == "Cluster1", ]
cluster2_data <- data_long[data_long$variable == "Cluster2", ]
cluster3_data <- data_long[data_long$variable == "Cluster3", ]

# Merge Cluster values into a single dataframe
cluster_combined <- Reduce(function(x, y) merge(x, y, by = "IID"),
                           list(
                             cluster1_data[, c("IID", "value")],
                             cluster2_data[, c("IID", "value")],
                             cluster3_data[, c("IID", "value")]
                           ))

# Rename columns for clarity
colnames(cluster_combined) <- c("IID", "Cluster1", "Cluster2", "Cluster3")

# Sort primarily by Cluster 1, then Cluster 2, and then Cluster 3 (all descending)
cluster_combined_sorted <- cluster_combined[order(
  -cluster_combined$Cluster1,
  -cluster_combined$Cluster2,
  -cluster_combined$Cluster3
), ]

# Use the sorted 'IID' order for the entire dataset
data_long_sorted <- data_long
data_long_sorted$IID <- factor(data_long_sorted$IID, levels = cluster_combined_sorted$IID)

# Create the bar plot with sorted individuals
ggplot(data_long_sorted, aes(x = IID, y = value, fill = variable)) +
  geom_bar(stat = "identity", width = 1) +
  labs(x = "Individuals", y = "Ancestry Proportion", fill = "Cluster") +
  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
  theme_minimal() +
  ggtitle("ADMIXTURE Plot Sorted by Clusters 1 to 3")

```

```{r}
# Subset data for all 4 clusters
cluster1_data <- data_long[data_long$variable == "Cluster1", ]
cluster2_data <- data_long[data_long$variable == "Cluster2", ]
cluster3_data <- data_long[data_long$variable == "Cluster3", ]
cluster4_data <- data_long[data_long$variable == "Cluster4", ]

# Merge Cluster values into a single dataframe
cluster_combined <- Reduce(function(x, y) merge(x, y, by = "IID"),
                           list(
                             cluster1_data[, c("IID", "value")],
                             cluster2_data[, c("IID", "value")],
                             cluster3_data[, c("IID", "value")],
                             cluster4_data[, c("IID", "value")]
                           ))

# Rename columns for clarity
colnames(cluster_combined) <- c("IID", "Cluster1", "Cluster2", "Cluster3", "Cluster4")

# Sort primarily by Cluster 1, then Cluster 2, Cluster 3, and Cluster 4 (all descending)
cluster_combined_sorted <- cluster_combined[order(
  -cluster_combined$Cluster1,
  -cluster_combined$Cluster2,
  -cluster_combined$Cluster3,
  -cluster_combined$Cluster4
), ]

# Use the sorted 'IID' order for the entire dataset
data_long_sorted <- data_long
data_long_sorted$IID <- factor(data_long_sorted$IID, levels = cluster_combined_sorted$IID)

# Create the bar plot with sorted individuals
ggplot(data_long_sorted, aes(x = IID, y = value, fill = variable)) +
  geom_bar(stat = "identity", width = 1) +
  labs(x = "Individuals", y = "Ancestry Proportion", fill = "Cluster") +
  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
  theme_minimal() +
  ggtitle("ADMIXTURE Plot Sorted by Clusters 1 to 4")

```

# Functions for admixture plots
```{r}
generate_admixture_plot <- function(k, fam_path, q_path, output_path) {
  file.exists(fam_path)
  file.exists(q_path)
  
  # Load the .fam and .Q files
  fam <- read.table(fam_path, header = FALSE)
  qmatrix <- read.table(q_path, header = FALSE)
  
  # Combine the data
  data <- cbind(fam, qmatrix)
  
  # Set column names
  colnames(data) <- c("FID", "IID", "PID", "MID", "Sex", "Phenotype", paste0("Cluster", 1:k))
  
  # Reshape data into long format for ggplot
  data_long <- melt(data, id.vars = c("FID", "IID"), measure.vars = paste0("Cluster", 1:k))

  # Create the bar plot
  plot <- ggplot(data_long, aes(x = IID, y = value, fill = variable)) +
    geom_bar(stat = "identity", width = 1) +
    labs(x = "Individuals", y = "Ancestry Proportion", fill = "Cluster") +
    theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
    theme_minimal() +
    ggtitle(paste("ADMIXTURE Plot k =", k))
  
  # Save the plot to file
  ggsave(output_path, plot, width = 10, height = 6, dpi = 300)
  message("ADMIXTURE plot saved to ", output_path)
}
```

```{r}
generate_admixture_plot_sorted <- function(k, fam_path, q_path, output_path) {
  # Load data
  fam <- read.table(fam_path, header = FALSE)
  qmatrix <- read.table(q_path, header = FALSE)
  
  # Combine data
  data <- cbind(fam, qmatrix)
  
  # Set column names
  num_clusters <- ncol(qmatrix)  # Number of clusters (e.g., 2 for K=2)
  colnames(data) <- c("FID", "IID", "PID", "MID", "Sex", "Phenotype", paste0("Cluster", 1:num_clusters))
  
  # Reshape data
  data_long <- melt(data, id.vars = c("FID", "IID"), measure.vars = paste0("Cluster", 1:num_clusters))
  
  # Sort individuals by their cluster proportions
  cluster_order <- data[, paste0("Cluster", 1:num_clusters)]  # Select the cluster columns
  order_indices <- do.call(order, c(as.data.frame(cluster_order), decreasing = TRUE))  # Order based on all clusters
  
  # Reorder IID according to the cluster proportions
  data_long$IID <- factor(data_long$IID, levels = data$IID[order_indices])
  
  # Define a stable color palette (using RColorBrewer or a custom palette)
  library(RColorBrewer)
  color_palette <- brewer.pal(max(k, 5), "Set3")  # Ensure at least 5 colors
  
  # Map the colors to the clusters, repeating colors for smaller k
  data_long$ClusterColor <- factor(data_long$variable, levels = paste0("Cluster", 1:num_clusters))
  
  # Create the bar plot with stable colors
  p <- ggplot(data_long, aes(x = IID, y = value, fill = ClusterColor)) +
    geom_bar(stat = "identity", width = 1) +
    scale_fill_manual(values = color_palette[1:num_clusters], labels = paste0("Cluster ", 1:num_clusters)) +  # Add cluster names to labels
    labs(x = "Individuals", y = "Ancestry Proportion", fill = "Cluster") +
    theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
    theme_minimal() +
    ggtitle(paste("ADMIXTURE Plot k =", k))
  
  # Save the plot
  ggsave(output_path, plot = p)  # Ensure plot is passed to ggsave outside ggplot pipeline
}
```

```{r}
generate_admixture_plots <- function(base_path, k_min = 2, k_max = 5) {
  
  # Function to generate the ADMIXTURE plot
  generate_admixture_plot <- function(k, fam_path, q_path, output_path, iid_order) {
    
    # Load data
    fam <- read.table(fam_path, header = FALSE)
    qmatrix <- read.table(q_path, header = FALSE)
    
    # Combine data
    data <- cbind(fam, qmatrix)
    
    # Set column names
    num_clusters <- ncol(qmatrix)  # Number of clusters for the current k
    colnames(data) <- c("FID", "IID", "PID", "MID", "Sex", "Phenotype", paste0("Cluster", 1:num_clusters))
    
    # Reshape data
    data_long <- melt(data, id.vars = c("FID", "IID"), measure.vars = paste0("Cluster", 1:num_clusters))
    
    # Apply the saved IID order for sorting (ensuring consistency across different k values)
    data_long$IID <- factor(data_long$IID, levels = iid_order)
    
    # Define a stable color palette (using RColorBrewer or a custom palette)
    library(RColorBrewer)
    color_palette <- brewer.pal(max(k, 5), "Set3")  # Ensure at least 5 colors
    
    # Map the colors to the clusters, repeating colors for smaller k
    data_long$ClusterColor <- factor(data_long$variable, levels = paste0("Cluster", 1:num_clusters))
    
    # Create the bar plot with stable colors
    p <- ggplot(data_long, aes(x = IID, y = value, fill = ClusterColor)) +
      geom_bar(stat = "identity", width = 1) +
      scale_fill_manual(values = color_palette[1:num_clusters], labels = paste0("Cluster ", 1:num_clusters)) +  # Add cluster names to labels
      labs(x = "Individuals", y = "Ancestry Proportion", fill = "Cluster") +
      theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
      theme_minimal() +
      ggtitle(paste("ADMIXTURE Plot k =", k))
    
    # Save the plot
    ggsave(output_path, plot = p)  # Ensure plot is passed to ggsave outside ggplot pipeline
  }
  
  # Load data for k = 2 to determine the sorting order of individuals
  k = 2
  fam_path <- paste0(base_path, ".fam")  # .fam file path
  q_path <- paste0(base_path, ".", k, ".Q")  # .Q file path for k = 2
  
  # Load the data for k = 2
  fam <- read.table(fam_path, header = FALSE)
  qmatrix <- read.table(q_path, header = FALSE)
  
  # Combine data and set column names
  data <- cbind(fam, qmatrix)
  num_clusters <- ncol(qmatrix)  # Number of clusters for k = 2
  colnames(data) <- c("FID", "IID", "PID", "MID", "Sex", "Phenotype", paste0("Cluster", 1:num_clusters))
  
  # Reshape data
  data_long <- melt(data, id.vars = c("FID", "IID"), measure.vars = paste0("Cluster", 1:num_clusters))
  
  # Sort individuals by their cluster proportions for k = 2
  cluster_order <- data[, paste0("Cluster", 1:num_clusters)]  # Select the cluster columns
  order_indices <- do.call(order, c(as.data.frame(cluster_order), decreasing = TRUE))  # Order based on all clusters
  iid_order <- data$IID[order_indices]  # Save the order of IIDs
  
  # Loop over k from k_min to k_max and use the saved IID order
  for (k in k_min:k_max) {
    # Construct dynamic file paths for the current k
    q_path <- paste0(base_path, ".", k, ".Q")  # .Q file path for current k
    output_dir <- dirname(base_path)
    output_path <- file.path(output_dir, paste0("admixture_plot_k", k, ".png"))  # Save in the same dir
    
    # Generate the plot for the current k
    generate_admixture_plot(k, fam_path, q_path, output_path, iid_order)
  }
}
```

```{r}
# Loop over k from 2 to 5
for (k in 2:5) {
  # Construct dynamic file paths
  base_path <- "UAgenomes/chr17/chr17_filtered2"  # Base path for files
  fam_path <- paste0(base_path, ".fam")                  # .fam file path
  q_path <- paste0(base_path, ".", k, ".Q")              # .Q file path with dynamic k

  # Extract the directory path to save the plot in the same directory
  output_dir <- dirname(base_path)
  output_path <- file.path(output_dir, paste0("admixture_plot_sorted_k", k, ".png"))  # Save in same dir

  # Generate the plot
  generate_admixture_plot_sorted(k, fam_path, q_path, output_path)
}
```

```{r}
# Example usage
base_path <- "Dragen/chr22/chr22_sample_100_filtered2" 
base_path <- "UAgenomes/chr20/Pundamilia.RAD_filtered2"  # Base path for files
base_path <- "UAgenomes/chr22/chr22_filtered2"
base_path <- "UAgenomes/chr17/chr17_filtered2"
generate_admixture_plots(base_path, k_min = 2, k_max = 5)
```
